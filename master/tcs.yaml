#
# Terms defined in TCS
#

# class: TaxonConcept
- localName: TaxonConcept
  label: Taxon Concept
  definition: >-
    An identifiable taxonomic position that can be aligned to other such 
    positions through TCS concept mapping relations.
  usage: >-
    A `TaxonConcept` MUST have `taxonName` and `accordingTo` properties. 
  notes: >-
    A taxonomic position is an opinion about the definition of a taxonomic
    group. A Taxon Concept is identifiable, because it combines a label –
    `taxonName` in TCS – with a source – `accordingTo`. Both the `taxonName` and
    `accordingTo` properties are required on a `tcs:TaxonConcept`. When
    mentioning a taxon concept, the label and the source are combined, separated
    by 'sec.' (from, 'secundus', meaning 'according to') or 'sensu' (meaning the
    same). The term `dcterms:title` has been borrowed from Dublin Core to provide this
    taxon concept label. Because of the context provided by the source, taxon
    concepts are in principle also alignable to other Taxon Concepts using TCS
    concept mapping statements. The concept mapping properties in TCS are
    `isCongruentWith`, `includes`, `isIncludedIn`, `partiallyOverlaps`,
    `isDisjointFrom` and `intersects`. These properties can be used directly on
    a `TaxonConcept` object or as the value of the `tcs:mappingRelation`
    property in a `tcs:TaxonConceptMapping` object.


    The TCS Taxon Concept is applied more broadly than the term is used in
    science (e.g. Franz & Peet 2009
    [\[franz_perspectives_2009\]](../bibliography/#franz_perspectives_2009)). On
    the one hand, things that are not generally considered to be biological
    taxa, e.g. hybrids and cultivars, can be casted as TCS Taxon Concepts. Also
    Operational Taxonomic Units (OTUs)
    [\[sokal_principles_1963\]](../bibliography/#sokal_principles_1963) can be
    exchanged as Taxon Concepts, if there is a reason to do so, e.g. if one
    wants to align them with other Taxon Concepts later. On the other hand,
    entries from treatments that are considered to cite concepts from other
    treatments can be formulated as Taxon Concepts. Every taxon concept from a
    treatment that is likely to be referenced as the source of taxonomic
    context, for example a field guide for a determination of a specimen or a
    national census for an ecological study, can – and it would be very nice if
    they would – be stated as a Taxon Concept, so they can be aligned with other
    Taxon Concepts that may provide more or different taxonomic context.


    By contrast, entries in the nomenclature section of treatments
    ('TaxonomicNameUsage's sensu Senderov et al. 2018
    &#91;[senderov_openbiodiv-o_2018](#senderov_openbiodiv-o_2018)&#93;) and in
    lists of nomenclatural types are not Taxon Concepts.
  examples: 
    - TaxonConcept-example-1
    - TaxonConcept-example-2
    - TaxonConcept-example-3
    - TaxonConcept-example-4
    - TaxonConcept-example-5
    - TaxonConcept-example-6
    - TaxonConcept-example-7
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: null
  repeatable: null
  github: 213
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept
    - predicate: "skos:exactMatch"
      iri: "tc:TaxonConcept"
    - predicate: "skos:relatedMatch"
      iri: "dwc:Taxon"
      remarks: >-
        The dwc:Taxon is hard to categorise. as it can be implemented in a way
        that a Taxon is equivalent to a TaxonConcept, but if either
        `taxonomicStatus` or `acceptedNameUsage` terms are used, both `accepted`
        and `synonym` uses are data artefacts that are not TaxonConcepts.
    - predicate: "skos:exactMatch"
      iri: "openbiodiv-o:TaxonomicConcept"
    - predicate: "skos:broadMatch"
      iri: "openbiodiv-o:OperationalTaxonomicUnit"
    - predicate: "skos:broadMatch"
      iri: "skos:Concept"
    - predicate: "skos:broadMatch"
      iri: "frbr:Work"
    

# property: accordingTo
- localName: accordingTo
  label: According To
  definition: >- 
    Reference to the treatment or other source in which a Taxon Concept is 
    established or used. 
  usage: >-
    `accordingTo` is an IRI term and is required on a Taxon Concept. A 
    Taxon Concept can have only one `accordingTo`. 
  notes: >-
    Every Taxon Concept is in some sort of treatment and this treatment 
    provides important context without which we do not know what a taxon name 
    really means and therefore the `accordingTo` property is required for a TCS 
    Taxon Concept. In TCS 2, `accordingTo` has to be a reference to some sort 
    of resource rather than just a person's name. However, TCS is lenient about 
    the nature of this resource and, apart from references to bibliographic 
    resources, references to personal communications and determinations are 
    also acceptable, if there is value in supplying taxon concepts from such 
    communications as Taxon Concepts.


    The value of `accordingTo` has to be an object or IRI. This object can 
    contain as little as a bibliographic reference but it is much more useful 
    to provide it in a format that can be understood by reference managers 
    such as Zotero or Mendeley.
  examples: 
    - TaxonConcept-accordingTo-example-1
    - TaxonConcept-accordingTo-example-2
    - TaxonConcept-accordingTo-example-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: Yes
  repeatable: No
  github: 4
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/AccordingTo/AccordingToDetailed
    - predicate: "skos:exactMatch"
      iri: "tn:accordingTo"
    - predicate: "skos:exactMatch"
      iri: "dwc:nameAccordingTo"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.
    - predicate: "skos:narrowMatch"
      iri: "frbr:realization"
      remarks: >-
        In OpenBiodiv-O, the `frbr:realization` is the `openbiodiv-o:Treatment`
        of that particular taxon. `tcs:accordingTo` can also point to the
        `openbiodiv-o:TaxonomicArticle`. In OpenBiodiv-O the `TaxonomicArticle`
        `openbiodiv-o:contains` the `Treatment`s.
    - predicate: "skos:closeMatch"
      iri: "skos:inScheme"
      remarks: >-
        Both the subject and object in this relationship have a broader meaning
        in SKOS, but if the subject is a TaxonConcept, the meaning of the term
        is the same.


# property: taxonName
- localName: taxonName
  label: Taxon name
  definition: The accepted name for the taxonomic group.
  usage: >-
    `taxonName` is an IRI term and is required on a TCS Taxon Concept. A Taxon 
    Concept can only have one `taxonName`.
  notes: >-
    The `taxonName` can be anything from a well-formed scientific name to an 
    informal name, vernacular name, indigenous knowledge label, or even a label 
    containing numbers and/or special symbols, such as are often used for OTUs. 
    

    The object of `taxonName` is an object or IRI, so that it can be reused in 
    other Taxon Concepts. TCS has got the Taxon Name class, which can be used 
    for any type of name, but people are free to use alternatives, e.g. 
    `skosxl:Label`, if they want to restrict the use of the Taxon Name class to 
    scientific (or scientific-y) names only.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: Yes
  repeatable: No
  github: 2
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/Name/@ref
    - predicate: "skos:exactMatch"
      iri: "tn:hasName"
    - predicate: "skos:narrowMatch"
      iri: "dwc:scientificName"
      remarks: >-
        In Darwin Core records that do not have a `scientificName` but do have a
        `vernacularName`, the `vernacularName` is the `taxonName`. Also note
        `dwc:scientificName` is a string and `tcs:taxonName` an IRI.
    - predicate: "skos:narrowMatch"
      iri: "dwc:vernacularName"
    - predicate: "skos:closeMatch"
      iri: "openbiodiv-o:taxonomicName"


# property: synonym
- localName: synonym
  label: Synonym
  definition: >-
    Name considered to apply to the same taxon as the accepted name.
  usage: >-
    `synonym` is a Taxon Name; a Taxon Concept can have multiple synonyms.
  notes: >-
    A synonym is an alternative label for a taxon, so `synonym`, like
    `taxonName`, is a relation between a `TaxonConcept` and a `TaxonName`, not a
    relationship between different taxonomic entities.


    The terms 'heterotypic synonym' and 'homotypic synonym' from the
    nomenclatural codes ('subjective synonym' and 'objective synonym',
    respectively, in the Zoological Code) are, in the context of Taxon Concepts
    and Taxon Names, best understood as synonyms (relations between Taxon
    Concepts and Taxon Names) and combinations (relations between Taxon Names),
    respectively. In TCS, combinations are dealt with using properties of the
    `TaxonName` class, *e.g.* `basionym` and `replacedName` (note that
    'combination' is used here in a broader sense that what the term actually
    means). This has the advantage that people do not need to separate
    heterotypic and homotypic synonyms, or generally deal with nomenclature,
    which adds a degree of complexity that not all systems need or want.
    Avoiding terms that are too strictly defined in the nomenclatural codes also
    has the advantage that the term can, in principle, be applied to things that
    cannot be heterotypic or homotypic synonyms, e.g., to names that are not
    validly published under the relevant code, or names at different taxonomic
    ranks than the accepted name, and avoids inappropriate use of the terms
    defined in the nomenclatural codes.
  examples: 
    - TaxonConcept-synonym-example-1
    - TaxonConcept-synonym-example-2
    - TaxonConcept-synonym-example-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 65
  mappings: 
    - predicate: "skos:broadMatch"
      iri: "/DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='has synonym']" 
      remarks: >-
        The 'has synonym' relationship from TCS 1 has been
        split into `synonym` for relations between TaxonConcept and TaxonName
        and `intersects` for relationships between TaxonConcepts. Also note that
        the object of `has synonym` is a TaxonConcept and the object of
        `synonym` a TaxonName.
    - predicate: "skos:broadMatch"
      iri: "tc:hasSynonym"
    - predicate: "skos:closeMatch"
      iri: "skosxl:hiddenLabel"
      remarks: >-
        A synonym is an alternative label that is not used for the TaxonConcept.

# property: vernacularName
- localName: vernacularName
  label: Vernacular Name
  definition: >-
    Name for a taxon in a language used for general purposes.
  usage: >-
    `vernacularName` is an IRI term; a Taxon Concept can have more than one 
    `vernacularName`.
  notes: >-
    The `vernacularName` property can be used when a vernacular name is used
    alongside a scientific name, which is the `taxonName`. If a vernacular name
    is the only name, the `taxonName` property should be used. The object of the
    `vernacularName` property can be a Taxon Name, but another label object,
    such as the GBIF [Vernacular
    Name](https://rs.gbif.org/extension/gbif/1.0/vernacularname.xml), might be
    preferrable, especially if there can be multiple vernacular names for a
    concept.
  examples: 
    - TaxonConcept-vernacularName-example-1
    - TaxonConcept-vernacularName-example-2
    - TaxonConcept-vernacularName-example-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 10
  mappings: 
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='has vernacular']
      remarks: >-
        Note that the object of `has vernacular` is a TaxonConcept while the
        object of `vernacularName` is a TaxonName.
    - predicate: "skos:exactMatch"
      iri: "tc:hasVernacular"
    - predicate: "skos:exactMatch"
      iri: "dwc:vernacularName"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.
    - predicate: "skos:closeMatch"
      iri: "openbiodiv-o:vernacularName"
    - predicate: "skos:closeMatch"
      iri: "skosxl:altLabel"
         

# property: taxonRank
- localName: taxonRank
  label: Taxonomic Rank
  definition: The rank at which a taxon is classified.
  usage: >-
    `taxonRank` is an IRI property; a Taxon Concept or Taxon Name can have
    only one `taxonRank`.
  notes: >-
    This property takes an object or IRI and it is recommended to use a value
    from an existing controlled vocabulary. While there is no TDWG vocabulary
    yet, the GBIF Taxonomic Rank Vocabulary
    (https://rs.gbif.org/vocabulary/gbif/rank.xml) is recommended.


    A `TaxonName` takes its `taxonRank` from the `taxonConcept` it is
    applied to, so this property can also be used on a (stand-alone) `TaxonName`
    object.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: No
  github: 32
  mappings: 
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/Rank/@code
    - predicate: "skos:exactMatch"
      iri: "tc:taxonomicRank"
    - predicate: "skos:exactMatch"
      iri: "dwc:taxonRank"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.

# property: parent
- localName: parent
  label: Parent
  definition: >-
    The direct parent in a classification.
  usage: >-
    `parent` is another Taxon Concept; a Taxon Concept can have only one 
    `parent`.
  notes: >-
    The `parent` is another Taxon Concept. This is the parent as indicated in 
    the `accordingTo` reference, rather than a third-party classification. The 
    `accordingTo` of the parent will generally, but not necessarily, be the 
    same as that of the child. 
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: No
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  examples:
    - TaxonConcept-parent-example-1
  github: 9
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='is child taxon of']
    - predicate: "skos:exactMatch"
      iri: "tc:isChildTaxonOf"
    - predicate: "skos:exactMatch"
      iri: "dwc:parentNameUsage"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.
    - predicate: "skos:closeMatch"
      iri: "skos:broader"

# property: child
- localName: child
  label: Child
  definition: >-
    A direct subordinate in a classification.
  usage: >-
    `child` is another Taxon Concept; a Taxon Concept can have more than one 
    child.
  notes: 
  examples: 
    - TaxonConcept-child-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 232
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='is parent taxon of']
    - predicate: "skos:exactMatch"
      iri: "tc:isParentTaxonOf"
    - predicate: "skos:closeMatch"
      iri: "skos:narrower"


# property: isCongruentWith
- localName: isCongruentWith
  label: Is Congruent With
  definition: >-
    The subject and object taxon concepts have a congruent taxonomic meaning, 
    i.e. there is no conflict between the concepts
  usage: >-
    `isCongruentWith` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isCongruentWith` relation is symmetrical, so if A `isCongruentWith` B
    then B `isCongruentWith` A, as well as transitive, so if A `isCongruentWith`
    B and B `isCongruentWith` C it follows that A `isCongruentWith` C.


    ![](../media/taxon-relationship-type-is-congruent-with.jpg)


    This relation can also be written as the formula **A &cong; B** or **A
    == B**.
  examples: 
    - TaxonConcept-isCongruentWith-example-1
    - TaxonConceptMapping-isCongruentWith-example-2
    - TaxonConcept-isCongruentWith-example-3
    - TaxonConceptMapping-isCongruentWith-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 52
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='is congruent to']
    - predicate: "skos:exactMatch"
      iri: "tc:isCongruentTo"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:Equal_INT"
      remarks: >-
        OpenBiodiv-O distinguishes between RCC5 Relation statements based on the
        ostensive component of the concepts and those based on the intensional
        component.
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:Equal_OST"
    - predicate: "skos:closeMatch"
      iri: "skos:closeMatch"

# property: includes
- localName: includes
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: Includes
  definition: >-
    The subject taxon concept has a more inclusive taxonomic meaning than
    the object taxon concept
  usage: >-
    `includes` can be used as a property on a Taxon Concept object, or as the
    value of the `mappingRelation` property on a Taxon Concept Mapping object.
    In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `includes` relation is not symmetric, its inverse relation being
    `isIncludedIn`, so if A `includes` B then B `isIncludedIn` A. The `includes`
    relation  is transitive, so if A `includes` B and B `includes` C it follows
    that A `includes` C.


    ![](../media/taxon-relationship-type-includes.jpg)


    This relation type can also be written as the formula **A > B**.
  examples: 
    - TaxonConcept-includes-example-1
    - TaxonConceptMapping-includes-example-2
    - TaxonConceptMapping-includes-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 53
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='includes']
    - predicate: "skos:exactMatch"
      iri: "tc:includes"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:InverseProperPart_INT"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:InverseProperPart_OST"
    - predicate: "skos:closeMatch"
      iri: "skos:broadMatch"

# controlled term: isIncludedIn
- localName: isIncludedIn
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: is included in
  definition: >-
    The subject taxon concept has a less inclusive taxonomic meaning than the 
    object taxon concept
  usage: >-
    `isIncludedIn` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isIncludedIn` relation is not symmetric, its inverse relation being
    `includes`, so if A `isIncludedIn` B then B `includes` A. The `isIncludedIn`
    relation  is transitive, so if A `isIncludedIn` B and B `isIncludedIn` C it
    follows that A `isIncludedIn` C.


    ![](../media/taxon-relationship-type-is-included-in.jpg)


    This relation type can also be written as the formula **A < B**.
  examples: 
    - TaxonConcept-isIncludedIn-example-1
    - TaxonConceptMapping-isIncludedIn-example-2
    - TaxonConceptMapping-isIncludedIn-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 54
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='is included in']
    - predicate: "skos:exactMatch"
      iri: "tc:isIncludedIn"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:ProperPart_INT"
      remarks: >-
        OpenBiodiv-O distinguishes between RCC5 Relation statements based on the
        ostensive component of the concepts and those based on the intensional
        component.
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:ProperPart_OST"
    - predicate: "skos:closeMatch"
      iri: "skos:narrowMatch"

# property: partiallyOverlaps
- localName: partiallyOverlaps
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: partially overlaps
  definition: >-
    The subject and object taxon concepts have partially overlapping taxonomic 
    meanings, _i.e._ they have some members in common, but each concept in 
    addition has members that are not included in the other concept
  usage: >-
    `partiallyOverlaps` can be used as a property on a Taxon Concept object, or
    as the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `partiallyOverlaps` relation is symmetrical, so if A `partiallyOverlaps`
    B then B `partiallyOverlaps` A, but not transitive, so, if A
    `partiallyOverlaps` B and B `partiallyOverlaps` C, it does not follow that A
    `partiallyOverlaps` C.


    ![](../media/taxon-relationship-type-partially-overlaps.jpg)


    This relation can also be written as the formula **A >< B**.
  examples:
    - TaxonConcept-partiallyOverlaps-example-1
    - TaxonConceptMapping-partiallyOverlaps-example-2
    - TaxonConceptMapping-partiallyOverlaps-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 55
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='overlaps']
    - predicate: "skos:exactMatch"
      iri: "tc:overlaps"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:PartiallyOverlaps_INT"
      remarks: >-
        OpenBiodiv-O distinguishes between RCC5 Relation statements based on the
        ostensive component of the concepts and those based on the intensional
        component.
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:PartiallyOverlaps_OST"

# property: isDisjointFrom
- localName: isDisjointFrom
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: is disjoint from
  definition: >-
    The subject and object taxon concepts have non-overlapping taxonomic 
    meanings, _i.e._ they do not have any members in common
  usage: >-
    `isDisjointFrom` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isDisjointFrom`  relation is symmetrical, so if A `isDisjointFrom` 
    B then B `isDisjointFrom` A, but not transitive, so, if A `isDisjointFrom` 
    B and B `isDisjointFrom` C, it does not follow that A `isDisjointFrom` C.


    ![](../media/taxon-relationship-type-is-disjoint-from.jpg)


    This relation can also be written as the formula **A | B**.
  examples:
    - TaxonConcept-isDisjointFrom-example-1
    - TaxonConceptMapping-isDisjointFrom-example-2
    - TaxonConceptMapping-isDisjointFrom-example-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 56
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='excludes']
    - predicate: "skos:exactMatch"
      iri: "tc:excludes"
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:Disjoint_INT"
      remarks: >-
        OpenBiodiv-O distinguishes between RCC5 Relation statements based on the
        ostensive component of the concepts and those based on the intensional
        component.
    - predicate: "skos:narrowMatch"
      iri: "openbiodiv-o:Disjoint_OST"

# property: intersects
- localName: intersects
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: Intersects
  definition: >-
    The taxonomic meanings of the subject and object taxon concepts intersect, 
    _i.e._ they have at least one member in common.
  usage: >-
    `intersects` can be used as a property on a Taxon Concept object, or as the
    value of the `mappingRelation` property on a Taxon Concept Mapping object.
    In both cases both the subject and object are Taxon Concepts.
  notes: >-
    `intersects` is the opposite of `isDisjointFrom` and the union of
    `isCongruentWith`, `includes`, `isIncludedIn` and `partiallyOverlaps`,
    meaning it can be any of these relations. This relation can be used when the
    more precise nature of the relationship is not known.


    Quasi-nomenclatural statements like 'pro parte synonym', 'partial synonym'
    and 'misapplication', are Taxon Concept Mappings, no matter how imperfect,
    and, in TCS, are best dealt with using the `intersects` relation. In fact,
    all 'traditional synonymy' relationships, cf. Berendsohn & al. (2000
    [\[berendsohn_berlin_2003\]](../bibliography/#berendsohn_berlin_2003)), can
    be accommodated using `intersects`. Also, citations of references in
    treatments are, in the context of TCS, best accommodated using the
    `intersects` relation.
  examples:
    - TaxonConcept-intersects-example-1
    - TaxonConcept-intersects-example-2
    - TaxonConceptMapping-intersects-example-1
    - TaxonConcept-intersects-example-3
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 57
  mappings:
    - predicate: "skos:broadMatch"
      iri: /DataSet/TaxonConcepts/TaxonConcept/TaxonRelationships/TaxonRelationship[@type='has synonym']
      remarks: >-
        The TCS 1 `has synonym` relationship has been split into `synonym` for
        relations between TaxonConcept and TaxonName and `intersects` for
        relationships between TaxonConcepts.
    - predicate: "skos:broadMatch"
      iri: "tc:hasSynonym"

# class: TaxonConceptMapping
- localName: TaxonConceptMapping
  label: Taxon concept mapping
  definition: >-
    Alignment or mapping of two Taxon Concepts in different taxonomies or
    different versions of a taxonomy
  usage: When using this class all properties are required
  notes: >-
    The Taxon Concept Mapping class allows for adding extra data to a taxon
    concept mapping statement. As it allows for adding an 'according to' to a
    concept mapping it can be used for third-party mappings. While structurally
    very similar to the Darwin Core Resource Relationship class, it is different
    in that instances of the Taxon Concept Mapping class are meaningful as
    standalone objects.
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: null
  repeatable: null
  github: 43
  examples:
    - TaxonConceptMapping-isCongruentWith-example-1
    - TaxonConceptMapping-isCongruentWith-example-2
    - TaxonConceptMapping-includes-example-1
    - TaxonConceptMapping-includes-example-2
    - TaxonConceptMapping-isIncludedIn-example-1
    - TaxonConceptMapping-isIncludedIn-example-2
    - TaxonConceptMapping-partiallyOverlaps-example-1
    - TaxonConceptMapping-partiallyOverlaps-example-2
    - TaxonConceptMapping-isDisjointFrom-example-1
    - TaxonConceptMapping-isDisjointFrom-example-2
    - TaxonConceptMapping-intersects-example-1
    - TaxonConceptMapping-intersects-example-2
  mappings:
    - predicate: "skos:broadMatch"
      iri: /DataSet/TaxonRelationshipAssertions/TaxonRelationshipAssertion
      remarks: >-
        TCS 1 TaxonRelationshipInsertions could include many more relationship
        types; the TCS 2 TaxonConceptMapping can only include the set-theory
        relationship types.
    - predicate: "skos:broadMatch"
      iri: "dwc:ResourceRelationship"
      remarks: >-
        The TaxonConceptMapping is a special kind of ResourceRelationship.
    - predicate: "skos:broadMatch"
      iri: "rdf:Statement"

# property: mappingAccordingTo
- localName: mappingAccordingTo
  label: Mapping according to
  definition: >-
    Reference to the source of the taxon concept mapping.
  usage: >-
    `mappingAccordingTo` is an IRI term and is required; a Taxon 
    Concept Mapping can have only one `mappingAccordingTo`.
  notes: null
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: No
  repeatable: No
  github: 47
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonRelationshipAssertions/TaxonRelationshipAssertion/AccordingTo
    - predicate: "skos:exactMatch"
      iri: "dwc:relationshipAccordingTo"

# property: mappingRelation
- localName: mappingRelation
  label: Mapping relation
  definition: The kind of mapping relation between the two concepts
  usage: >-
    This property is required; one MUST use one of the mapping properties
    `isCongruentWith`, `includes`, `isIncludedIn`, `partiallyOverlaps`,
    `isDisjointFrom` or `intersects`.
  notes: null
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 44
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonRelationshipAssertions/TaxonRelationshipAssertion/@type
    - predicate: "skos:exactMatch"
      iri: "dwc:relationshipOfResourceID"

# property: subjectTaxonConcept
- localName: subjectTaxonConcept
  label: Subject Taxon Concept
  definition: Taxon Concept that is the subject in the mapping statement.
  usage: >-
    `subjectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `subjectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the left-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 45
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonRelationshipAssertions/TaxonRelationshipAssertion/FromTaxonConcept
    - predicate: "skos:exactMatch"
      iri: "dwc:resourceID"

# property: objectTaxonConcept
- localName: objectTaxonConcept
  label: Object Taxon Concept
  definition: Taxon Concept that is the object in the mapping statement.
  usage: >-
    `objectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `objectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the right-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 46
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonRelationshipAssertions/TaxonRelationshipAssertion/ToTaxonConcept
    - predicate: "skos:exactMatch"
      iri: "dwc:relatedResourceID"


# class: TaxonName 
- localName: TaxonName
  label: Taxon Name
  definition: A name or label applied to a taxon or taxonomic group. 
  usage: >-
    A TCS Taxon Name requires either a `taxonNameString` or 
    `dwc:scientificName`.
  notes: >-
    The word 'name' here is taken in its dictionary meaning and not in the sense
    of a particular nomenclatural code. This means that the Taxon Name class
    can, in principle, be used for any type of name, not just names that are
    validly published under the relevant nomenclatural code.
  examples: 
    - TaxonName-example-1
    - TaxonName-example-2
    - TaxonName-example-3
    - TaxonName-example-4
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: null
  repeatable: null
  github: 15
  mappings: 
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName
    - predicate: "skos:exactMatch"
      iri: "tn:TaxonName"
    - predicate: "skos:closeMatch"
      iri: "openbiodiv-o:TaxonomicName"
    - predicate: "skos:broadMatch"
      iri:  "skosxl:Label"
      remarks: >-
        The TaxonName is a special kind of SKOSXL Label

# property: taxonNameString
- localName: taxonNameString
  label: Taxon Name String
  definition: >-
    The complete name string without any authority or year components.
  usage: >-
    `taxonNameString` is a literal. Either `taxonomicNameString` or 
    `dwc:scientificName` is required on a TCS Taxon Name and a Taxon Name can 
    have only one of either.
  notes: >-
    The `taxonNameString` property differs from the `scientificName` property 
    in Darwin Core in that all kinds of names are allowed. Also, in the case of 
    scientific names, contrary to the `dwc:scientificName`, `taxonNameString` 
    does not include the authorship. In botanical names, it does include the 
    rank prefixes for infrageneric and infraspecific epithets as they are 
    considered part of the name.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 16
  mappings: 
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Simple
    - predicate: "skos:exactMatch"
      iri: "tn:nameComplete"
    - predicate: "skos:closeMatch"
      iri: "skosxl:literalForm"

# property: namePublishedIn
- localName: namePublishedIn
  label: Name Published In
  definition: >-
    Reference to the publication in which the name was first published.
  usage: null
  notes: >-
    In botany, this would be the protologue. This is the IRI counterpart of 
    the Darwin Core `namePublishedIn`, which TCS borrows.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 29
  mappings: 
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/PublishedIn
    - predicate: "skos:exactMatch"
      iri: "tn:namePublishedIn"
    - predicate: "skos:exactMatch"
      iri: "dwc:namePublishedIn"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term

# property: microreference
- localName: microreference
  label: Microreference
  definition: Specifies any minor reference parts, e.g. page number.
  usage: >-
    `microreference` is a string literal; a Taxon Name can have only one 
    `microreference` and only when `namePublishedIn` is used as well.
  notes: >-
    In taxonomic works it is convention to cite the exact location in a work 
    where a new name is published. The `microreference` property lets one do 
    that on the Taxon Name object, so that the `namePublishedIn` reference can 
    be reused.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 30
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/MicroReference
    - predicate:
      iri: "tn:microReference"

# property: nomenclaturalCode
- localName: nomenclaturalCode
  label: Nomenclatural Code
  definition: >-
    Nomenclatural code that applies to the group of organisms the taxonomic name 
    is for.
  usage: >-
    `nomenclaturalCode` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalCode`.
  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalCode`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Codes Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_code.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 33
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/@nomenclaturalCode
    - predicate: "skos:exactMatch"
      iri: "tn:nomenclaturalCode"
    - predicate: "skos:exactMatch"
      iri: "dwc:nomenclaturalCode"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.

# property: nomenclaturalStatus
- localName: nomenclaturalStatus
  label: Nomenclatural Status
  definition: >-
    Status related to the original publication of the name and its conformance
    to the relevant rules of nomenclature.
  usage: >-
    `nomenclaturalStatus` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalStatus`.
  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalStatus`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Status Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 35
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/PublicationStatus
    - predicate: "skos:exactMatch"
      iri: "tn:publicationStatus"
    - predicate: "skos:exactMatch"
      iri: "dwc:nomenclaturalCode"
      remarks: >-
        The TCS term is the IRI equivalent of the Darwin Core term.


# property: typification
- localName: typification
  label: Typification
  definition: >-
    Designation of a nomenclatural type for a name
  usage: >-
    The `typification` property takes a `tcs:NomenclaturalType` or array of
    `tcs:NomenclaturalType`s.
  notes: >-
    `tcs:typification` is the inverse of `tcs:typifiedName`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  examples: 
    - TaxonName-typification-example-1
    - TaxonName-typification-example-2
  github: 238
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification


# property: typificationLiteral
- localName: typificationLiteral
  label: Typification
  definition: >-
    Designation of a nomenclatural type for a name
  usage: The `typificationLiteral` property takes a literal value.
  notes: >-
    The `typificationLiteral` property can be used for citation of a type (or
    types) as written in the publication in which the typified name was
    published. 
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 223
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/Simple

# property: basionym
- localName: basionym
  label: Basionym
  definition: Epithet- or name-bringing synonym.
  usage: >-
    A `basionym` is another Taxon Name; a Taxon Name can have only one
    `basionym`.
  notes: >-
    The term `basionym` is in the draft BioCode
    ([\[greuter_draft_2011\]](../bibliography/#greuter_draft_2011)), so can be
    used for all organisms. The `basionym` property is only used for new
    combinations ('comb. nov.'). If the new name is a replacement name ('nom.
    nov.') the `replacedName` property should be used instead. It should be
    noted that a basionym is always a different name or combination: a name
    cannot be its own basionym.
  examples: 
    - TaxonName-basionym-example-1
    - TaxonName-basionym-example-2
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 36
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Basionym
    - predicate: "skos:exactMatch"
      iri: "tn:hasBasionym"
    - predicate: "skos:broadMatch"
      iri: "dwc:originalNameUsage"
      remarks: >-
        `originalNameUsage` can be a `basionym` or a `replacedName` or any older
        name with the same type. Also note that `originalNameUsage` is a string.

# property: replacedName
- localName: replacedName
  label: Replaced name
  definition: >-
    The legitimate or illegitimate, previously published name on which a 
    replacement name (nomen novum) is based.
  usage: >-
    `replacedName` is another Taxon Name; a Taxon Name can have only one 
    `replacedName`.
  notes: >-
    'replaced name' is used in the draft BioCode
    ([\[greuter_draft_2011\]](../bibliography/#greuter_draft_2011)). In the
    Botanical Code the term 'replaced synonym' is used for the same thing. A
    'replacement name' is a name that is published as a substitute for an
    earlier published name that is either illegitimate or for which a new
    combination cannot be created in the place a taxon is transferred to because
    of an older blocking name.
  examples: 
    - TaxonName-replacedName-example-1
    - TaxonName-replacedName-example-2
    - TaxonName-replacedName-example-3
    - TaxonName-replacedName-example-4
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 37
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/ReplacementNameFor
    - predicate: "skos:exactMatch"
      iri: "tn:ReplacementNameFor"
    - predicate: "skos:broadMatch"
      iri: "dwc:originalNameUsage"
      remarks: >-
        `originalNameUsage` can be a `replacedName` or a `basionym` or any older
        name with the same type. Also note that `originalNameUsage` is a string.

# property: basedOn
- localName: basedOn
  label: Based on
  definition: >-
    Earlier name on which this name is based
  usage: >-
    `basedOn` is another Taxon Name; a Taxon Name can have only one `basedOn`.
    The term should only be used in situations where the semantically more
    meaningful `basionym` and `replacedName` cannot be used.
  notes: >-
    The `basedOn` property can be used to associate a name to a homotypic group
    of names in situations where the `basionym` and `replacedName` properties
    cannot be used. Therefore the property can be useful for (1) linking an
    autonym to a species name, (2) linking a valid name to an earlier invalid
    name and (3) linking an invalid name to a later valid name.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 38

# property: laterHomonymOf
- localName: laterHomonymOf
  label: Later homonym of
  definition: >-
    An older legitimate name with the same spelling but a different
    nomenclatural type
  usage: >-
    `laterHomonymOf` is another Taxon Name object
  notes: >-
    If there are more than two homonyms, the oldest one should be given here. In
    zoology, this is the _senior homonym_.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 229
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/LaterHomonymOf
    - predicate: "skos:exactMatch"
      iri: "tn:LaterHomonymOf"

# property: conservedAgainst
- localName: conservedAgainst
  label: Conserved Against
  definition: Name(s) against which this name is conserved.
  usage: >-
    The `conservedAgainst` property takes another Taxon Name; a Taxon Name can 
    be conserved against more than one other Taxon Names.
  notes: >-
    A scientific name below the rank of family is not conserved against all 
    other names, but only against one or more names that in turn are rejected 
    against the conserved name. A name can be conserved against more than one 
    other name, so this property is repeatable.
  examples:
    - TaxonName-conservedAgainst-example-1
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  github: 39
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/ConservedAgainst
    - predicate: "skos:exactMatch"
      iri: "tn:ConservedAgainst"

# property: combinationAuthor
- localName: combinationAuthor
  label: Combination author
  definition: Author of the combination
  usage: >-
    `combinationAuthor` is an IRI property. It can be a person or a list of persons.
  notes: >-
    'combination' is taken here to be a different name with the same
    nomenclatural type.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  examples: 
    - TaxonName-combinationAuthor-example-1
  github: 239

# property: combinationAuthorLiteral
- localName: combinationAuthorLiteral
  label: Combination author literal
  definition: Author of the combination
  usage: >-
    `combinationAuthorLiteral` is a Literal property.
  notes: >-
    'combination' is taken here to be a different name with the same
    nomenclatural type.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 239

# property: basionymAuthor
- localName: basionymAuthor
  label: Basionym author
  definition: Author of the basionym of the name
  usage: >-
    `basionymAuthor` is an IRI property. It can be a person or a list of
    persons.
  notes: >-
    `basionymAuthor` (or its literal counterpart) is the bit in parentheses
    in the `dwc:scientificNameAuthorship`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  examples:
    - TaxonName-basionymAuthor-example-1
  github: 239

# property: basionymAuthorLiteral
- localName: basionymAuthorLiteral
  label: Basionym author literal
  definition: Author of the basionym of the name
  usage: >-
    `basionymAuthorLiteral` is a Literal property.
  notes: >-
    `basionymAuthorLiteral` is the bit in parentheses
    in the `dwc:scientificNameAuthorship`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 239

# property: combinationAscribedAuthor
- localName: combinationAscribedAuthor
  label: Combination ascribed author
  definition: Ascribed author of the present name
  usage: >-
    `combinationAscribedAuthor` is an IRI property. It can be a person or a list
    of persons.
  notes: >-
    'Ascribed author' is a person (or group of people) who a name is ascribed to
    in a publication, but who is not the author of the name according to the
    rules of the nomenclatural codes, because they did not contribute to the
    validating description of the name. In the `dwc:scientificNameAuthorship`
    these authors are indicated with 'ex', the ascribed author coming before the
    'ex' and the author the name is attributed to after. Note that the 'ex'
    construction that is sometimes used with zoological names has got nothing to
    do with attribution or ascription, but is used to indicate a concept, much
    like we do here with 'sec.' or 'sensu' in taxon concept labels.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  examples: 
    - TaxonName-combinationAscribedAuthor-example-1
  github: 239

# property: combinationAscribedAuthorLiteral
- localName: combinationAscribedAuthorLiteral
  label: Combination ascribed author literal
  definition: Ascribed author of the present name
  usage: >-
    `combinationAscribedAuthorLiteral` is a Literal property.
  notes: >-
    'Ascribed author' is a person (or group of people) who a name is ascribed to
    in a publication, but who is not the author of the name according to the
    rules of the nomenclatural codes, because they did not contribute to the
    validating description of the name. In the `dwc:scientificNameAuthorship`
    these authors are indicated with 'ex', the ascribed author coming before the
    'ex' and the author the name is attributed to after. Note that the 'ex'
    construction that is sometimes used with zoological names has got nothing to
    do with attribution or ascription, but is used to indicate a concept, much
    like we do here with 'sec.' or 'sensu' in taxon concept labels.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 239

# property: basionymAscribedAuthor
- localName: basionymAscribedAuthor
  label: Basionym author
  definition: Ascribed author of the basionym of the name
  usage: >-
    `basionymAscribedAuthor` is an IRI property. It can be a person or a list of
    persons.
  notes: >-
    'Ascribed author' is a person (or group of people) who a name is ascribed to
    in a publication, but who is not the author of the name according to the
    rules of the nomenclatural codes, because they did not contribute to the
    validating description of the name. In the `dwc:scientificNameAuthorship`
    these authors are indicated with 'ex', the ascribed author coming before the
    'ex' and the author the name is attributed to after. Note that the 'ex'
    construction that is sometimes used with zoological names has got nothing to
    do with attribution or ascription, but is used to indicate a concept, much
    like we do here with 'sec.' or 'sensu' in taxon concept labels.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  examples:
    - TaxonName-basionymAscribedAuthor-example-1
  github: 239

# property: basionymAscribedAuthorLiteral
- localName: basionymAscribedAuthorLiteral
  label: Basionym author literal
  definition: Ascribed author of the basionym of the name
  usage: >-
    `basionymAscribedAuthorLiteral` is a Literal property.
  notes: >-
    'Ascribed author' is a person (or group of people) who a name is ascribed to
    in a publication, but who is not the author of the name according to the
    rules of the nomenclatural codes, because they did not contribute to the
    validating description of the name. In the `dwc:scientificNameAuthorship`
    these authors are indicated with 'ex', the ascribed author coming before the
    'ex' and the author the name is attributed to after. Note that the 'ex'
    construction that is sometimes used with zoological names has got nothing to
    do with attribution or ascription, but is used to indicate a concept, much
    like we do here with 'sec.' or 'sensu' in taxon concept labels.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 239


# class: NomenclaturalType
- localName: NomenclaturalType
  label: Nomenclatural Type
  definition: Element to which a scientific name is permanently attached.
  usage: >-
    A Nomenclatural Type requires a `typifiedName`, `typeOfType` and either a
    `typeName` or `typeSpecimen`.
  notes: >-
    A nomenclatural type fixes the usage of a name to the taxonomic group that 
    contains the type. One or more Nomenclatural Types make up the typification 
    of a Taxon Name. In Darwin Core, NomenclaturalType can be used as object 
    with `dwciri:typeStatus`.
  examples: 
    - NomenclaturalType-example-1
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  repeatable: null
  required: null
  github: 58
  mappings:
    - predicate: "skos:narrowMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeVouchers/TypeVoucher/
      remarks: >-
        TCS 1 does not have an equivalent for NomenclaturalType, but has a
        choice between TypeName and TypeVouchers. Therefore, TypeVoucher does
        not include those NomenclaturalTypes that have a `typeName` rather than
        a `typeSpecimen`.
    - predicate: "skos:broadMatch"
      iri: "dwc:ResourceRelationship"
      remarks: >-
        A NomenclaturalType is in essence a special kind of ResourceRelationship
        connecting a name to a specimen or other name, with, depending on
        whether one comes from a tcs:TaxonName or a dwc:MaterialEntity,
        `typifiedName` being the `resourceID` and `typeSpecimen` or `typeName`
        the `relatedResourceID` and vice versa.

# property: typifiedName
- localName: typifiedName
  label: Typified Name
  definition: >-
    The scientific name for which the specimen or other name is the type.
  usage: >-
    `typifiedName` is a Taxon Name and is required; a Nomenclatural Type can 
    typify only one Taxon Name.
  notes: >-
    The `typifiedName` property links the Nomenclatural Type back to the Taxon 
    Name. Also, when coming from the Preserved Specimen, the typified name is 
    the most important piece of information, because there is no point in 
    knowing what kind of type a specimen is without knowing for what name it 
    is the type. Therefore, `typifiedName` is a required property.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: Yes
  repeatable: No
  github: 59
  mappings:
    - predicate: ""
      iri: ""
      remarks: >-
        In TCS 1 there is no property relating a TypeVoucher to a TaxonName, as
        TypeVouchers are nested under the TaxonName.

# property: typeOfType
- localName: typeOfType
  label: Type of Type
  definition: >-
    The kind of type this specimen is, e.g. holotype, isotype etc.
  usage: >-
    `typeOfType` is an IRI term and should take its value from a controlled 
    vocabulary. A Nomenclatural Type can have only one `typeOfType`
  notes: >-
    This is an IRI property. In the absence of a TDWG controlled vocabulary, 
    it is recommended to use a value from the GBIF Nomenclatural Type Status 
    Vocabulary (https://rs.gbif.org/vocabulary/gbif/type_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  required: Yes
  repeatable: No
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  github: 60
  mappings:
    - predicate: "skos:narrowMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeVouchers/TypeVoucher/@typeofType
      remarks: >-
        In TCS 1 only TypeVouchers have a `typeOfType`; TypeName does not.
    - predicate: "skos:narrowMatch"
      iri: "tn:typeOfType"

# property: typeName
- localName: typeName
  label: Type Name
  definition: The name that is the type.
  usage: >-
    `typeName` is a Taxon Name. A nomenclatural type can have only one 
    `typeName`.
  notes: >-
    Taxon names at ranks above species level can be typified by the name of a 
    lower taxon. Ultimately, by following the chain of type names, all names 
    resolve to a type species and thus a type specimen. 
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 61
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeName/NameReference
    - predicate: "skos:exactMatch"
      iri: "tn:typeName"

# property: typeSpecimen
- localName: typeSpecimen
  label: Type Specimen
  definition: The specimen that is the type.
  usage: >-
    `typeSpecimen` takes an IRI – or object – that refers to a specimen. A 
    Nomenclatural Type can only have one `typeSpecimen`.
  notes: >-
    Names at ranks of species and below are typified by a specimen. This
    property is mutually exclusive with `typeName`. This is an IRI property. One
    could use the Darwin Core Preserved Specimen or Material Citation. While a
    Taxon Name can have more than one type specimens, each of these type
    specimens requires its own Nomenclatural Type record, so a Nomenclatural
    Type can have only one `typeSpecimen`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 62
  mappings:
    - predicate: "skos:exactMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeVouchers/TypeVoucher/VoucherReference
    - predicate: "skos:exactMatch"
      iri: "tn:typeSpecimen"


# property: typePublishedIn
- localName: typePublishedIn
  label: Type Published In
  definition: Publication where the type was nominated
  usage: >-
    `typePublishedIn` is an IRI term. A Nomenclatural Type can have at most one 
    `typePublishedIn`. 
  notes: >-
    `typePublishedIn` is relevant for lectotypes, neotypes, epitypes and 
    conserved types. For other kinds of type the publication where the type is 
    designated is the publication the name was published in.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 63
  mappings:
    - predicate: "skos:narrowMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeName/LectotypePublication
      remarks: >-
        Apart from TCS 1 having different elements for `LectotypePublication`for
        TypeName and TypeVoucher, the TCS 1 terms are ostensibly only to be used
        for lectotypifications, while designations of neotypes, epitypes and
        conserved types also takes place in different publications from the ones
        the names have been published in. The TCS 2 term can be used for all
        these typifications, as it could for typifications that are in the
        publication of the name.
    - predicate: "skos:narrowMatch"
      iri: /DataSet/TaxonNames/TaxonName/Typification/TypeVouchers/TypeVoucher/LectotypePublication
