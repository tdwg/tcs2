#
# Terms defined in TCS
#

# class: TaxonConcept
- localName: TaxonConcept
  label: Taxon Concept
  definition: >-
    An identifiable taxonomic position that can be aligned to other such 
    positions through TCS concept mapping relationships.
  usage: >-
    A `TaxonConcept` MUST have a label and a source. For the source, the
    `accordingTo` property MUST be used. For the label, one or more of
    `taxonName`, `dwc:scientificName`and `dcterms:identifier` MUST be used. 
  notes: >-
    A taxonomic position is an opinion about the definition of a taxonomic
    group. A Taxon Concept is identifiable, because it combines a label –
    `taxonName` in TCS – with a source – `accordingTo`. The `accordingTo`
    property is required. The `taxonName` property is not strictly required,
    because its role can, in principle, be taken by other properties, e.g.,
    `dcterms:title` or `dwc:scientificName`, When mentioning a taxon concept,
    the label and the source are combined, separated by 'sec.' (from,
    'secundus', meaning 'according to') or 'sensu' (meaning the same). The term
    `title` has been borrowed from Dublin Core to provide this taxon concept
    label. Because of the context provided by the source, taxon concepts are in
    principle also alignable to other Taxon Concepts using TCS concept mapping
    relation statements. The concept mapping properties in TCS are
    `isCongruentWith`, `includes`, `isIncludedIn`, `partiallyOverlaps`,
    `isDisjointFrom` and `intersects`.


    The TCS Taxon Concept is applied more broadly than the term is used in
    science (e.g. Franz & Peet 2009
    [\[franz_perspectives_2009\]](../bibliography/#franz_perspectives_2009)). On
    the one hand, things that are not generally considered to be biological
    taxa, e.g. hybrids and cultivars, can be casted as TCS Taxon Concepts. Also
    Operational Taxonomic Units (OTUs)
    [\[sokal_principles_1963\]](../bibliography/#sokal_principles_1963) can be
    exchanged as Taxon Concepts, if there is a reason to do so, e.g. if one
    wants to align them with other Taxon Concepts later. On the other hand,
    entries from treatments that are considered to cite concepts from other
    treatments can be formulated as Taxon Concepts. Every taxon concept from a
    treatment that is likely to be referenced as the source of taxonomic
    context, for example a field guide for a determination of a specimen or a
    national census for an ecological study, can – and it would be very nice if
    they would – be stated as a Taxon Concept, so they can be aligned with other
    Taxon Concepts that may provide more or different taxonomic context.


    By contrast, entries in the nomenclature section of treatments (synonyms) 
    and in lists of nomenclatural types are not Taxon Concepts.
  examples: 
    - TaxonConcept-1
    - TaxonConcept-2
    - TaxonConcept-3
    - TaxonConcept-4
    - TaxonConcept-5
    - TaxonConcept-6
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: null
  repeatable: null
  github: 213

# property: accordingTo
- localName: accordingTo
  label: According To
  definition: >- 
    Reference to the treatment or other source in which a Taxon Concept is 
    established or used. 
  usage: >-
    `accordingTo` is an IRI term and is required on a Taxon Concept. A 
    Taxon Concept can have only one `accordingTo`. 
  notes: >-
    Every Taxon Concept is in some sort of treatment and this treatment 
    provides important context without which we do not know what a taxon name 
    really means and therefore the `accordingTo` property is required for a TCS 
    Taxon Concept. In TCS 2, `accordingTo` has to be a reference to some sort 
    of resource rather than just a person's name. However, TCS is lenient about 
    the nature of this resource and, apart from references to bibliographic 
    resources, references to personal communications and determinations are 
    also acceptable, if there is value in supplying taxon concepts from such 
    communications as Taxon Concepts.


    The value of `accordingTo` has to be an object or IRI. This object can 
    contain as little as a bibliographic reference but it is much more useful 
    to provide it in a format that can be understood by reference managers 
    such as Zotero or Mendeley.
  examples: 
    - TaxonConcept-accordingTo-1
    - TaxonConcept-accordingTo-2
    - TaxonConcept-accordingTo-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: Yes
  repeatable: No
  github: 4

# property: taxonName
- localName: taxonName
  label: Taxon name
  definition: The accepted name for the taxonomic group.
  usage: >-
    `taxonName` is an IRI term and is required on a TCS Taxon Concept. A Taxon 
    Concept can only have one `taxonName`.
  notes: >-
    The `taxonName` can be anything from a well-formed scientific name to an 
    informal name, vernacular name, indigenous knowledge label, or even a label 
    containing numbers and/or special symbols, such as are often used for OTUs. 
    

    The object of `taxonName` is an object or IRI, so that it can be reused in 
    other Taxon Concepts. TCS has got the Taxon Name class, which can be used 
    for any type of name, but people are free to use alternatives, e.g. 
    `skosxl:Label`, if they want to restrict the use of the Taxon Name class to 
    scientific (or scientific-y) names only.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: No
  github: 2

# property: synonym
- localName: synonym
  label: Synonym
  definition: >-
    Name considered to apply to the same taxon as the accepted name.
  usage: >-
    `synonym` is a Taxon Name; a Taxon Concept can have multiple synonyms.
  notes: >-
    Synonyms are names and synonymy is between names but, unless the names have
    the same nomenclatural type, the context of a Taxon Concept is needed to
    establish which names are synonyms of each other. Therefore, `synonym` is a
    property of the Taxon Concept class. `synonym` is used here in the strict
    meaning that the type of a name falls within a Taxon Concept. The same goes
    for the accepted name and therefore `synonym` has the same relationship to
    Taxon Concept as `taxonName`. This means one can use names without having to
    deal with the original Taxon Concepts for which the name was published as a
    label. If one wants to include these “original concepts” and indicate a
    relationship between Taxon Concepts, and the more precise relation is not
    provided, the `intersects` relation can be used.


    The terms 'heterotypic synonym' and 'homotypic synonym' from the
    nomenclatural codes ('subjective synonym' and 'objective synonym',
    respectively, in the Zoological Code) are, in the context of Taxon Concepts
    and Taxon Names, best understood as synonyms (relations between Taxon
    Concepts and Taxon Names) and combinations (relations between Taxon Names),
    respectively. In TCS, combinations are dealt with using the `basionym`
    property. This has the advantage that people do not need to separate
    heterotypic and homotypic synonyms, or generally deal with nomenclature,
    which adds a degree of complexity that not all systems need or want.
    Avoiding terms that are too strictly defined in the nomenclatural codes also
    has the advantage that the term can, in principle, be applied to things that
    cannot be heterotypic or homotypic synonyms, e.g., to names that are not
    validly published under the codes, or names of different taxonomic ranks
    than the accepted name, and avoids inappropriate use of the terms defined in
    the nomenclatural codes.
  examples: 
    - TaxonConcept-synonym-1
    - TaxonConcept-synonym-2
    - TaxonConcept-synonym-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 65

# property: vernacularName
- localName: vernacularName
  label: Vernacular Name
  definition: >-
    Name for a taxon in a language used for general purposes.
  usage: >-
    `vernacularName` is an IRI term; a Taxon Concept can have more than one 
    `vernacularName`.
  notes: >-
    The `vernacularName` property can be used when a vernacular name is used
    alongside a scientific name, which is the `taxonName`. If a vernacular name
    is the only name, the `taxonName` property should be used. The object of the
    `vernacularName` property can be a Taxon Name, but another label object,
    such as the GBIF [Vernacular
    Name](https://rs.gbif.org/extension/gbif/1.0/vernacularname.xml), might be
    preferrable, especially if there can be multiple vernacular names for a
    concept.
  examples: 
    - TaxonConcept-vernacularName-1
    - TaxonConcept-vernacularName-2
    - TaxonConcept-vernacularName-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 10

# property: taxonomicRank
- localName: taxonomicRank
  label: Taxonomic Rank
  definition: The rank at which a taxon is classified.
  usage: >-
    `taxonomicRank` is an IRI property; a Taxon Concept or Taxon Name can have
    only one `taxonomicRank`.
  notes: >-
    The rank is an attribute of elements in a classification and implementations
    can decide for themselves if it makes more sense to use `taxonomicRank` on a
    Taxon Concept object or a Taxon Name object, or both. This property takes an
    object or IRI and it is recommended to use a value from an existing
    controlled vocabulary. While there is no TDWG vocabulary yet, the GBIF
    Taxonomic Rank Vocabulary (https://rs.gbif.org/vocabulary/gbif/rank.xml) is
    recommended.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: No
  github: 32

# property: parent
- localName: parent
  label: Parent
  definition: >-
    The direct parent in a classification.
  usage: >-
    `parent` is another Taxon Concept; a Taxon Concept can have only one 
    `parent`.
  notes: >-
    The `parent` is another Taxon Concept. This is the parent as indicated in 
    the `accordingTo` reference, rather than a third-party classification. The 
    `accordingTo` of the parent will generally, but not necessarily, be the 
    same as that of the child. 
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: No
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 9

# property: child
- localName: child
  label: Child
  definition: >-
    A direct subordinate in a classification.
  usage: >-
    `child` is another Taxon Concept; a Taxon Concept can have more than one 
    child.
  notes: 
  examples: 
    - TaxonConcept-child-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 232

# property: isCongruentWith
- localName: isCongruentWith
  label: Is Congruent With
  definition: >-
    The subject and object taxon concepts have a congruent taxonomic meaning, 
    i.e. there is no conflict between the concepts
  usage: >-
    `isCongruentWith` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isCongruentWith` relation is symmetrical, so if A `isCongruentWith` B
    then B `isCongruentWith` A, as well as transitive, so if A `isCongruentWith`
    B and B `isCongruentWith` C it follows that A `isCongruentWith` C.


    ![](../media/taxon-relationship-type-is-congruent-with.jpg)


    This relation can also be written as the formula **A &cong; B** or **A
    == B**.
  examples: 
    - TaxonConcept-isCongruentWith-1
    - TaxonConceptMapping-isCongruentWith-2
    - TaxonConcept-isCongruentWith-3
    - TaxonConceptMapping-isCongruentWith-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 52

# property: includes
- localName: includes
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: Includes
  definition: >-
    The subject taxon concept has a more inclusive taxonomic meaning than
    the object taxon concept
  usage: >-
    `includes` can be used as a property on a Taxon Concept object, or as the
    value of the `mappingRelation` property on a Taxon Concept Mapping object.
    In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `includes` relation is not symmetric, its inverse relation being
    `isIncludedIn`, so if A `includes` B then B `isIncludedIn` A. The `includes`
    relation  is transitive, so if A `includes` B and B `includes` C it follows
    that A `includes` C.


    ![](../media/taxon-relationship-type-includes.jpg)


    This relation type can also be written as the formula **A > B**.
  examples: 
    - TaxonConcept-includes-1
    - TaxonConceptMapping-includes-2
    - TaxonConceptMapping-includes-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 53

# controlled term: isIncludedIn
- localName: isIncludedIn
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: is included in
  definition: >-
    The subject taxon concept has a less inclusive taxonomic meaning than the 
    object taxon concept
  usage: >-
    `isIncludedIn` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isIncludedIn` relation is not symmetric, its inverse relation being
    `includes`, so if A `isIncludedIn` B then B `includes` A. The `isIncludedIn`
    relation  is transitive, so if A `isIncludedIn` B and B `isIncludedIn` C it
    follows that A `isIncludedIn` C.


    ![](../media/taxon-relationship-type-is-included-in.jpg)


    This relation type can also be written as the formula **A < B**.
  examples: 
    - TaxonConcept-isIncludedIn-1
    - TaxonConceptMapping-isIncludedIn-2
    - TaxonConceptMapping-isIncludedIn-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 54

# property: partiallyOverlaps
- localName: partiallyOverlaps
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: partially overlaps
  definition: >-
    The subject and object taxon concepts have partially overlapping taxonomic 
    meanings, _i.e._ they have some members in common, but each concept in 
    addition has members that are not included in the other concept
  usage: >-
    `partiallyOverlaps` can be used as a property on a Taxon Concept object, or
    as the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `partiallyOverlaps` relation is symmetrical, so if A `partiallyOverlaps`
    B then B `partiallyOverlaps` A, but not transitive, so, if A
    `partiallyOverlaps` B and B `partiallyOverlaps` C, it does not follow that A
    `partiallyOverlaps` C.


    ![](../media/taxon-relationship-type-partially-overlaps.jpg)


    This relation can also be written as the formula **A >< B**.
  examples:
    - TaxonConcept-partiallyOverlaps-1
    - TaxonConceptMapping-partiallyOverlaps-2
    - TaxonConceptMapping-partiallyOverlaps-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 55

# property: isDisjointFrom
- localName: isDisjointFrom
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: is disjoint from
  definition: >-
    The subject and object taxon concepts have non-overlapping taxonomic 
    meanings, _i.e._ they do not have any members in common
  usage: >-
    `isDisjointFrom` can be used as a property on a Taxon Concept object, or as
    the value of the `mappingRelation` property on a Taxon Concept Mapping
    object. In both cases both the subject and object are Taxon Concepts.
  notes: >-
    The `isDisjointFrom`  relation is symmetrical, so if A `isDisjointFrom` 
    B then B `isDisjointFrom` A, but not transitive, so, if A `isDisjointFrom` 
    B and B `isDisjointFrom` C, it does not follow that A `isDisjointFrom` C.


    ![](../media/taxon-relationship-type-is-disjoint-from.jpg)


    This relation can also be written as the formula **A | B**.
  examples:
    - TaxonConcept-isDisjointFrom-1
    - TaxonConceptMapping-isDisjointFrom-2
    - TaxonConceptMapping-isDisjointFrom-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 56

# property: intersects
- localName: intersects
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  label: Intersects
  definition: >-
    The taxonomic meanings of the subject and object taxon concepts intersect, 
    _i.e._ they have at least one member in common.
  usage: >-
    `intersects` can be used as a property on a Taxon Concept object, or as the
    value of the `mappingRelation` property on a Taxon Concept Mapping object.
    In both cases both the subject and object are Taxon Concepts.
  notes: >-
    `intersects` is the opposite of `isDisjointFrom` and the union of
    `isCongruentWith`, `includes`, `isIncludedIn` and `partiallyOverlaps`,
    meaning it can be any of these relations. This relation can be used when the
    more precise nature of the relationship is not known.


    Quasi-nomenclatural statements like 'pro parte synonym', 'partial synonym'
    and 'misapplication', are Taxon Concept Mappings, no matter how imperfect,
    and, in TCS, are best dealt with using the `intersects` relation. In fact,
    all 'traditional synonymy' relationships, cf. Berendsohn & al. (2000
    [\[berendsohn_berlin_2003\]](../bibliography/#berendsohn_berlin_2003)), can
    be accommodated using `intersects`. Also, citations of references in
    treatments are, in the context of TCS, best accommodated using the
    `intersects` relation.
  examples:
    - TaxonConcept-intersects-1
    - TaxonConcept-intersects-2
    - TaxonConceptMapping-intersects-1
    - TaxonConcept-intersects-3
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  github: 57

# class: TaxonConceptMapping
- localName: TaxonConceptMapping
  label: Taxon concept mapping
  definition: >-
    Alignment or mapping of two Taxon Concepts in different taxonomies or
    different versions of a taxonomy
  usage: When using this class all properties are required
  notes: >-
    The Taxon Concept Mapping class allows for adding extra data to a taxon
    concept mapping statement. As it allows for adding an 'according to' to a
    concept mapping it can be used for third-party mappings. While structurally
    very similar to the Darwin Core Resource Relationship class, it is different
    in that instances of the Taxon Concept Mapping class are meaningful as
    standalone objects.
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: null
  repeatable: null
  github: 43

# property: mappingAccordingTo
- localName: mappingAccordingTo
  label: Mapping according to
  definition: >-
    Reference to the source of the taxon concept mapping.
  usage: >-
    `mappingAccordingTo` is an IRI term and is required; a Taxon 
    Concept Mapping can have only one `mappingAccordingTo`.
  notes: null
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 47

# property: mappingRelation
- localName: mappingRelation
  label: Mapping relation
  definition: The kind of mapping relation between the two concepts
  usage: >-
    This property is required; one MUST use one of the mapping properties
    `isCongruentWith`, `includes`, `isIncludedIn`, `partiallyOverlaps`,
    `isDisjointFrom` or `intersects`.
  notes: null
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 44

# property: subjectTaxonConcept
- localName: subjectTaxonConcept
  label: Subject Taxon Concept
  definition: Taxon Concept that is the subject in the mapping statement.
  usage: >-
    `subjectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `subjectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the left-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 45

# property: objectTaxonConcept
- localName: objectTaxonConcept
  label: Object Taxon Concept
  definition: Taxon Concept that is the object in the mapping statement.
  usage: >-
    `objectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `objectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the right-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 46


# class: TaxonName 
- localName: TaxonName
  label: Taxon Name
  definition: A name or label applied to a taxon or taxonomic group. 
  usage: >-
    A TCS Taxon Name requires either a `taxonNameString` or 
    `dwc:scientificName`.
  notes: >-
    The word 'name' here is taken in its dictionary meaning and not in the sense
    of a particular nomenclatural code. This means that the Taxon Name class
    can, in principle, be used for any type of name, not just names that are
    validly published under the relevant nomenclatural code.
  examples: 
    - TaxonName-1
    - TaxonName-2
    - TaxonName-3
    - TaxonName-4
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: null
  repeatable: null
  github: 15

# property: taxonNameString
- localName: taxonNameString
  label: Taxon Name String
  definition: >-
    The complete name string without any authority or year components.
  usage: >-
    `taxonNameString` is a literal. Either `taxonomicNameString` or 
    `dwc:scientificName` is required on a TCS Taxon Name and a Taxon Name can 
    have only one of either.
  notes: >-
    The `taxonNameString` property differs from the `scientificName` property 
    in Darwin Core in that all kinds of names are allowed. Also, in the case of 
    scientific names, contrary to the `dwc:scientificName`, `taxonNameString` 
    does not include the authorship. In botanical names, it does include the 
    rank prefixes for infrageneric and infraspecific epithets as they are 
    considered part of the name.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 16

# property: namePublishedIn
- localName: namePublishedIn
  label: Name Published In
  definition: >-
    Reference to the publication in which the name was first published.
  usage: null
  notes: >-
    In botany, this would be the protologue. This is the IRI counterpart of 
    the Darwin Core `namePublishedIn`, which TCS borrows.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 29

# property: microreference
- localName: microreference
  label: Microreference
  definition: Specifies any minor reference parts, e.g. page number.
  usage: >-
    `microreference` is a string literal; a Taxon Name can have only one 
    `microreference` and only when `namePublishedIn` is used as well.
  notes: >-
    In taxonomic works it is convention to cite the exact location in a work 
    where a new name is published. The `microreference` property lets one do 
    that on the Taxon Name object, so that the `namePublishedIn` reference can 
    be reused.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 30

# property: nomenclaturalCode
- localName: nomenclaturalCode
  label: Nomenclatural Code
  definition: >-
    Nomenclatural code that applies to the group of organisms the taxonomic name 
    is for.
  usage: >-
    `nomenclaturalCode` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalCode`.
  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalCode`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Codes Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_code.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 33

# property: nomenclaturalStatus
- localName: nomenclaturalStatus
  label: Nomenclatural Status
  definition: >-
    Status related to the original publication of the name and its conformance
    to the relevant rules of nomenclature.
  usage: >-
    `nomenclaturalStatus` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalStatus`.
  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalStatus`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Status Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 35

# property: typification
- localName: typification
  label: Typification
  definition: >-
    Designation of a nomenclatural type for a name
  notes: >-
    The `typification` property can be used for citation of a type (or types) as
    written in the publication in which the typified name was published.
    Alternatively, or in addition, the Nomenclatural Type object can be used for
    to link a typified name to a type name or type specimen.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 223

# property: basionym
- localName: basionym
  label: Basionym
  definition: Epithet- or name-bringing synonym.
  usage: >-
    A `basionym` is another Taxon Name; a Taxon Name can have only one
    `basionym`.
  notes: >-
    The term `basionym` is in the draft BioCode
    ([\[greuter_draft_2011\]](../bibliography/#greuter_draft_2011)), so can be
    used for all organisms. The `basionym` property is only used for new
    combinations ('comb. nov.'). If the new name is a replacement name ('nom.
    nov.') the `replacedName` property should be used instead. It should be
    noted that a basionym is always a different name or combination: a name
    cannot be its own basionym.
  examples: 
    - TaxonName-basionym-1
    - TaxonName-basionym-2
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 36

# property: replacedName
- localName: replacedName
  label: Replaced name
  definition: >-
    The legitimate or illegitimate, previously published name on which a 
    replacement name (nomen novum) is based.
  usage: >-
    `replacedName` is another Taxon Name; a Taxon Name can have only one 
    `replacedName`.
  notes: >-
    'replaced name' is used in the draft BioCode
    ([\[greuter_draft_2011\]](../bibliography/#greuter_draft_2011)). In the
    Botanical Code the term 'replaced synonym' is used for the same thing. A
    'replacement name' is a name that is published as a substitute for an
    earlier published name that is either illegitimate or for which a new
    combination cannot be created in the place a taxon is transferred to because
    of an older blocking name.
  examples: 
    - TaxonName-replacedName-1
    - TaxonName-replacedName-2
    - TaxonName-replacedName-3
    - TaxonName-replacedName-4
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 37

# property: spellingCorrectionOf
- localName: spellingCorrectionOf
  label: Spelling correction of
  definition: >-
    Name for which this name is a correction
  usage: >-
    `spellingCorrectionOf` is another Taxon Name object
  notes: >-
    The `spellingCorrectionOf` property can be used if the originally published 
    name string, or another established name string, is not spelt correctly 
    according to the current version of the relevant Code. It can link an 
    established spelling of a name to the correctly spelt name where other name 
    relation properties cannot.
  examples:
    - TaxonName-spellingCorrectionOf-1
    - TaxonName-spellingCorrectionOf-2
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  github: 224

# property: laterHomonymOf
- localName: laterHomonymOf
  label: Later homonym of
  definition: >-
    An older legitimate name with the same spelling but a different
    nomenclatural type
  usage: >-
    `laterHomonymOf` is another Taxon Name object
  notes: >-
    If there are more than two homonyms, the oldest one should be given here. In
    zoology, this is the _senior homonym_.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 229

# property: conservedAgainst
- localName: conservedAgainst
  label: Conserved Against
  definition: Name(s) against which this name is conserved.
  usage: >-
    The `conservedAgainst` property takes another Taxon Name; a Taxon Name can 
    be conserved against more than one other Taxon Names.
  notes: >-
    A scientific name below the rank of family is not conserved against all 
    other names, but only against one or more names that in turn are rejected 
    against the conserved name. A name can be conserved against more than one 
    other name, so this property is repeatable.
  examples:
    - TaxonName-conservedAgainst
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  github: 39


# class: NomenclaturalType
- localName: NomenclaturalType
  label: Nomenclatural Type
  definition: Element to which a scientific name is permanently attached.
  usage: >-
    A Nomenclatural Type requires a `typifiedName` and either a `typeName` or 
    `typeSpecimen`.
  notes: >-
    A nomenclatural type fixes the usage of a name to the taxonomic group that 
    contains the type. One or more Nomenclatural Types make up the typification 
    of a Taxon Name. In Darwin Core, NomenclaturalType can be used as object 
    with `dwciri:typeStatus`.
  examples: 
    - NomenclaturalType
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  repeatable: null
  required: null
  github: 58

# property: typifiedName
- localName: typifiedName
  label: Typified Name
  definition: >-
    The scientific name for which the specimen or other name is the type.
  usage: >-
    `typifiedName` is a Taxon Name and is required; a Nomenclatural Type can 
    typify only one Taxon Name.
  notes: >-
    The `typifiedName` property links the Nomenclatural Type back to the Taxon 
    Name. Also, when coming from the Preserved Specimen, the typified name is 
    the most important piece of information, because there is no point in 
    knowing what kind of type a specimen is without knowing for what name it 
    is the type. Therefore, `typifiedName` is a required property.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: Yes
  repeatable: No
  github: 59

# property: typeOfType
- localName: typeOfType
  label: Type of Type
  definition: >-
    The kind of type this specimen is, e.g. holotype, isotype etc.
  usage: >-
    `typeOfType` is an IRI term and should take its value from a controlled 
    vocabulary. A Nomenclatural Type can have only one `typeOfType`
  notes: >-
    This is an IRI property. In the absence of a TDWG controlled vocabulary, 
    it is recommended to use a value from the GBIF Nomenclatural Type Status 
    Vocabulary (https://rs.gbif.org/vocabulary/gbif/type_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  required: No
  repeatable: No
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  github: 60

# property: typeName
- localName: typeName
  label: Type Name
  definition: The name that is the type.
  usage: >-
    `typeName` is a Taxon Name. A nomenclatural type can have only one 
    `typeName`.
  notes: >-
    Taxon names at ranks above species level can be typified by the name of a 
    lower taxon. Ultimately, by following the chain of type names, all names 
    resolve to a type species and thus a type specimen. 
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 61

# property: typeSpecimen
- localName: typeSpecimen
  label: Type Specimen
  definition: The specimen that is the type.
  usage: >-
    `typeSpecimen` takes an IRI – or object – that refers to a specimen. A 
    Nomenclatural Type can only have one `typeSpecimen`.
  notes: >-
    Names at ranks of species and below are typified by a specimen. This
    property is mutually exclusive with `typeName`. This is an IRI property. One
    could use the Darwin Core Preserved Specimen or Material Citation. While a
    Taxon Name can have more than one type specimens, each of these type
    specimens requires its own Nomenclatural Type record, so a Nomenclatural
    Type can have only one `typeSpecimen`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 62

# property: typePublishedIn
- localName: typePublishedIn
  label: Type Published In
  definition: Publication where the type was nominated
  usage: >-
    `typePublishedIn` is an IRI term. A Nomenclatural Type can have at most one 
    `typePublishedIn`. 
  notes: >-
    `typePublishedIn` is relevant for lectotypes, neotypes, epitypes and 
    conserved types. For other kinds of type the publication where the type is 
    designated is the publication where the name was published.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 63
