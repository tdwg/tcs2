#
# Terms defined in TCS
#

# class: TaxonConcept
- localName: TaxonConcept
  label: Taxon Concept
  definition: >-
    An identifiable taxonomic position that can be aligned to other such 
    positions through TCS concept mapping relationships.
  usage: The `taxonName` and `accordingTo` properties are required.
  notes: >-
    A taxonomic position is an opinion about the definition of a taxonomic 
    group. A Taxon Concept is identifiable, because it combines a label – 
    `taxonName` in TCS – with a source – `accordingTo`. Both these properties 
    are required. When mentioning a taxon concept, the label and the source are 
    combined, separated by 'sec.' (from, 'secundus', meaning 'according 
    to') or 'sensu' (meaning the same). The term `title` has been borrowed from 
    Dublin Core to provide this taxon concept label. Because of the context 
    provided by the source, taxon concepts are in principle also alignable to 
    other Taxon Concepts using TCS concept mapping relationship statements. The 
    concept mapping properties in TCS are `isCongruentWith`, `includes`, 
    `isIncludedIn`, `partiallyOverlaps`, `isDisjointFrom` and `intersects`.


    The TCS Taxon Concept is applied more broadly than the term is used in 
    science (e.g. Franz & Peet 2009 
    [\[franz_perspectives_2009\]](../bibliography/#franz_perspectives_2009)). 
    On the one hand, things 
    that are not generally considered to be biological taxa, e.g. hybrids and 
    cultivars, can be casted as TCS Taxon Concepts. Also Operational Taxonomic 
    Units (OTUs) [\[sokal_principles_1963\]](../bibliography/#sokal_principles_1963) 
    can be exchanged as Taxon Concepts, if there is a reason to do so, e.g. if 
    one wants to align them with other Taxon Concepts later. On the other hand, 
    entries from treatments that are considered to cite concepts from other 
    treatments can be formulated as Taxon Concepts. Every taxon concept from a 
    treatment that is likely to be referenced as the source of taxonomic 
    context, for example a field guide for a determination of a specimen or a 
    national census for an ecological study, can – and it would be very nice if 
    they would – be stated as a Taxon Concept, so they can be aligned with other 
    Taxon Concepts that may provide more or different taxonomic context.


    By contrast, entries in the nomenclature section of treatments (synonyms) 
    and in lists of nomenclatural types are not Taxon Concepts.
  examples: 
    - TaxonConcept-1
    - TaxonConcept-2
    - TaxonConcept-3
    - TaxonConcept-4
    - TaxonConcept-5
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: null
  repeatable: null
  github: 1

# property: accordingTo
- localName: accordingTo
  label: According To
  definition: >- 
    Reference to the treatment or other source in which a Taxon Concept is 
    established or used. 
  usage: >-
    `accordingTo` is an IRI term and is required on a Taxon Concept. A 
    Taxon Concept can have only one `accordingTo`. 
  notes: >-
    Every Taxon Concept is in some sort of treatment and this treatment 
    provides important context without which we do not know what a taxon name 
    really means and therefore the `accordingTo` property is required for a TCS 
    Taxon Concept. In TCS 2, `accordingTo` has to be a reference to some sort 
    of resource rather than just a person's name. However, TCS is lenient about 
    the nature of this resource and, apart from references to bibliographic 
    resources, references to personal communications and determinations are 
    also acceptable, if there is value in supplying taxon concepts from such 
    communications as Taxon Concepts.


    The value of `accordingTo` has to be an object or IRI. This object can 
    contain as little as a bibliographic reference but it is much more useful 
    to provide it in a format that can be understood by reference managers 
    such as Zotero or Mendeley.
  examples: 
    - TaxonConcept-accordingTo-1
    - TaxonConcept-accordingTo-2
    - TaxonConcept-accordingTo-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: Yes
  repeatable: No
  github: 4

# property: taxonName
- localName: taxonName
  label: Taxon name
  definition: The accepted name for the taxonomic group.
  usage: >-
    `taxonName` is an IRI term and is required on a TCS Taxon Concept. A Taxon 
    Concept can only have one `taxonName`.
  notes: >-
    The `taxonName` can be anything from a well-formed scientific name to an 
    informal name, vernacular name, indigenous knowledge label, or even a label 
    containing numbers and/or special symbols, such as are often used for OTUs. 
    

    The object of `taxonName` is an object or IRI, so that it can be reused in 
    other Taxon Concepts. TCS has got the Taxon Name class, which can be used 
    for any type of name, but people are free to use alternatives, e.g. 
    `skosxl:Label`, if they want to restrict the use of the Taxon Name class to 
    scientific (or scientific-y) names only.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: Yes
  repeatable: No
  github: 2

# property: synonym
- localName: synonym
  label: Synonym
  definition: >-
    Name considered to apply to the same taxon as the accepted name.
  usage: >-
    `synonym` is a Taxon Name; a Taxon Concept can have multiple synonyms.
  notes: >-
    Synonyms are names and synonymy is between names but, if the names have
    different nomenclatural types, a Taxon Concept is required. Therefore,
    `synonym` is a property of the Taxon Concept class. `synonym` is used here
    in the strict meaning that the type of a name falls within a Taxon Concept.
    The same goes for the accepted name and therefore `synonym` has the same
    relationship to Taxon Concept as `taxonName`. This allows one to dispose of
    names without having to deal with the Taxon Concepts that were realised
    along with the publication of these names. If one wants to include these
    “original concepts” and indicate a relationship between Taxon Concepts, and
    the more precise relationship is not provided, the `intersects` property can
    be used.


    The terms 'heterotypic synonym' and 'homotypic synonym' from the
    nomenclatural codes ('subjective synonym' and 'objective synonym',
    respectively, in the Zoological Code) are, in the context of Taxon Concepts,
    best treated as 'synonyms' and 'combinations', respectively. Combinations
    are dealt with using the `basionym` and `replacedSynonym` properties. This
    has the advantage that people do not need to separate heterotypic and
    homotypic synonyms, or group names around a type, which adds a degree of
    complexity that not all systems need or want. Avoiding terms that are too
    strictly defined in the nomenclatural codes also has the advantage that the
    term can be applied to things that cannot be heterotypic or homotypic
    synonyms, e.g., to names that are not validly published under the codes, or
    names of different taxonomic ranks than the accepted name, and avoids
    inappropriate use of the terms defined in the nomenclatural codes.
  examples: 
    - TaxonConcept-synonym-1
    - TaxonConcept-synonym-2
    - TaxonConcept-synonym-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 65

# property: vernacularName
- localName: vernacularName
  label: Vernacular Name
  definition: >-
    Common or vernacular name for a taxonomic group, when used besides the 
    `taxonName`.
  usage: >-
    `vernacularName` is an IRI term; a Taxon Concept can have more than one 
    `vernacularName`.
  notes: >-
    The `vernacularName` property can be used when a vernacular name is used 
    alongside a scientific name, which is the `taxonName`. If a vernacular name 
    is the only name, the `taxonName` property should be used. The object of the 
    `vernacularName` property can be a Taxon Name, but another label 
    object, such as the GBIF [Vernacular Name](https://rs.gbif.org/extension/gbif/1.0/vernacularname.xml), 
    might be preferrable, especially if there can be multiple vernacular names 
    for a concept.
  examples: 
    - TaxonConcept-vernacularName-1
    - TaxonConcept-vernacularName-2
    - TaxonConcept-vernacularName-3
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: Yes
  github: 10

# property: taxonomicRank
- localName: taxonomicRank
  label: Taxonomic Rank
  definition: The rank at which a taxon is classified.
  usage: >-
    `taxonomicRank` is an IRI property; a Taxon Concept can have only one 
    `taxonomicRank`.
  notes: >-
    The rank is an attribute of elements in a classification and `taxonomicRank` 
    can be applied to Taxon Concepts as well Taxon Names, as the rank of a 
    taxon is reflected in its name. This property takes an object or IRI and it 
    is recommended to use a value from an existing controlled vocabulary. 
    While there is no TDWG vocabulary yet, the GBIF Taxonomic Rank Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/rank.xml) is recommended.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  required: No
  repeatable: No
  github: 32

# property: parent
- localName: parent
  label: Parent
  definition: >-
    The direct parent in a classification.
  usage: >-
    `parent` is another Taxon Concept; a Taxon Concept can have only one 
    `parent`.
  notes: >-
    The `parent` is another Taxon Concept. This is the parent as indicated in 
    the `accordingTo` reference, rather than a third-party classification. The 
    `accordingTo` of the parent will generally, but not necessarily, be the 
    same as that of the child. 
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: No
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 8

# property: isCongruentWith
- localName: isCongruentWith
  label: Is Congruent With
  definition: >-
    The subject and object taxon concepts have a congruent taxonomic meaning, 
    i.e. there is no conflict between the concepts
  usage: null
  notes: >-
    The `isCongruentWith` property allows one to do a taxon concept mapping
    without having to create a Taxon Concept Mapping object. This can be done
    when the mapping is done in the same publication as one of the Taxon
    Concepts that are mapped, as in this case the subject and according to from
    the mapping are obtained from the Taxon Concept. For more details, see the
    [`isCongruentWith`](../taxon-concept-mapping-relation-vocabulary/#tcreltypeiscongruentwith)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples: 
    - TaxonConcept-isCongruentWith-1
    - TaxonConcept-isCongruentWith-3
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 52

# property: includes
- localName: includes
  type: http://www.w3.org/2004/02/skos/core#Concept
  label: Includes
  definition: >-
    The subject taxon concept has a more inclusive taxonomic meaning than
    the object taxon concept
  notes: >-
    The `includes` property allows one to do a taxon concept mapping without
    having to create a Taxon Concept Mapping object. This can be done when the
    mapping is done in the same publication as one of the Taxon Concepts that
    are mapped, as in this case the subject and according to from the mapping
    are obtained from the Taxon Concept. For more details, see the
    [`includes`](../taxon-concept-mapping-relation-vocabulary/#tcreltypeincludes)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples: 
    - TaxonConcept-includes-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 53

# controlled term: isIncludedIn
- localName: isIncludedIn
  type: http://www.w3.org/2004/02/skos/core#Concept
  label: is included in
  definition: >-
    The subject taxon concept has a less inclusive taxonomic meaning than the 
    object taxon concept
  notes: >-
    The `isIncludedIn` property allows one to do a taxon concept mapping without
    having to create a Taxon Concept Mapping object. This can be done when the
    mapping is done in the same publication as one of the Taxon Concepts that
    are mapped, as in this case the subject and according to from the mapping
    are obtained from the Taxon Concept. For more details, see the
    [`isIncludedIn`](../taxon-concept-mapping-relation-vocabulary/#tcreltypeisincludedin)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples: 
    - TaxonConcept-isIncludedIn-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 54

# property: partiallyOverlaps
- localName: partiallyOverlaps
  type: http://www.w3.org/2004/02/skos/core#Concept
  label: partially overlaps
  definition: >-
    The subject and object taxon concepts have partially overlapping taxonomic 
    meanings, _i.e._ they have some members in common, but each concept in 
    addition has members that are not included in the other concept
  notes: >-
    The `partiallyOverlaps` property allows one to do a taxon concept mapping
    without having to create a Taxon Concept Mapping object. This can be done
    when the mapping is done in the same publication as one of the Taxon
    Concepts that are mapped, as in this case the subject and according to from
    the mapping are obtained from the Taxon Concept. For more details, see the
    [`partiallyOverlaps`](../taxon-concept-mapping-relation-vocabulary/#tcreltypepartiallyoverlaps)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples:
    - TaxonConcept-partiallyOverlaps-1
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 55

# property: isDisjointFrom
- localName: isDisjointFrom
  type: http://www.w3.org/2004/02/skos/core#Concept
  label: is disjoint from
  definition: >-
    The subject and objects taxon concepts have non-overlapping taxonomic 
    meanings, _i.e._ they do not have any members in common
  notes: >-
    The `isDisjointFrom` property allows one to do a taxon concept mapping
    without having to create a Taxon Concept Mapping object. This can be done
    when the mapping is done in the same publication as one of the Taxon
    Concepts that are mapped, as in this case the subject and according to from
    the mapping are obtained from the Taxon Concept. For more details, see the
    [`isDisjointFrom`](../taxon-concept-mapping-relation-vocabulary/#tcreltypeisdisjointfrom)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples:
    - TaxonConcept-isDisjointFrom
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 56

# property: intersects
- localName: intersects
  type: http://www.w3.org/2004/02/skos/core#Concept
  label: Intersects
  definition: >-
    The taxonomic meanings of the subject and object taxon concepts intersect, 
    _i.e._ they have at least one member in common.
  usage: null
  notes: >-
    The `intersects` property allows one to do a taxon concept mapping without
    having to create a Taxon Concept Mapping object. This can be done when the
    mapping is done in the same publication as one of the Taxon Concepts that
    are mapped, as in this case the subject and according to from the mapping
    are obtained from the Taxon Concept. For more details, see the
    [`intersects`](../taxon-concept-mapping-relation-vocabulary/#tcreltypeintersects)
    controlled term in the Taxon Concept Mapping Relation Vocabulary.
  examples:
    - TaxonConcept-intersects-1
    - TaxonConcept-intersects-2
    - TaxonConcept-intersects-3
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConcept
  repeatable: Yes
  required: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 57

# class: TaxonConceptMapping
- localName: TaxonConceptMapping
  label: Taxon concept mapping
  definition: Mapping or alignment of two Taxon Concepts
  usage: When using this class all properties are required
  notes: >-
    The Taxon Concept Mapping class allows for adding an 'according to' to a
    concept mapping and therefore alows for third-party mappings. Applications
    might prefer to always use the Taxon Concept Mapping class rather than the
    mapping properties, as it allows for treating all mappings the same way.
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: null
  repeatable: null
  github: 43


# property: mappingAccordingTo
- localName: mappingAccordingTo
  label: Mapping according to
  definition: >-
    Reference to the source of the taxon concept mapping.
  usage: >-
    `mappingAccordingTo` is an IRI term and is required; a Taxon 
    Concept Mapping can have only one `mappingAccordingTo`.
  notes: >-
    In the case of Taxon Relationships from traditional synonymy, the 
    `relationshipAccordingTo` is the same as the `accordingTo` of the Taxon 
    Concept that is the `subjectTaxonConcept`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 47

# property: mappingRelation
- localName: mappingRelation
  label: Mapping relation
  definition: The kind of mapping relation between the two concepts
  usage: >-
    This property is required; one MUST use one of the mapping properties
    `isCongruentWith`, `includes`, `isIncludedIn`, `partiallyOverlaps`,
    `isDisjointFrom` or `intersects`.
  notes: null
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 44

# property: subjectTaxonConcept
- localName: subjectTaxonConcept
  label: Subject Taxon Concept
  definition: Taxon Concept that is the subject in the mapping statement.
  usage: >-
    `subjectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `subjectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the left-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 45

# property: objectTaxonConcept
- localName: objectTaxonConcept
  label: Object Taxon Concept
  definition: Taxon Concept that is the object in the mapping statement.
  usage: >-
    `objectTaxonConcept` is a TCS Taxon Concept; a Taxon Concept Mapping 
    statement can have only one `objectTaxonConcept`.
  notes: >-
    This is the Taxon Concept at the right-hand side of the statement.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonConceptMapping
  required: Yes
  repeatable: No
  github: 46


# class: TaxonName 
- localName: TaxonName
  label: Taxon Name
  definition: A name or label applied to a taxon or taxonomic group. 
  usage: >-
    A TCS Taxon Name requires either a `taxonNameString` or 
    `dwc:scientificName`.
  notes: >-
    The word 'name' here is taken in its dictionary meaning and not in the 
    sense of a particular nomenclatural code. This means that the Taxon Name 
    class can be used for any type of name, not just names that are validly 
    published under the relevant nomenclatural code.
  examples: 
    - TaxonName-1
    - TaxonName-2
    - TaxonName-3
    - TaxonName-4
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: null
  repeatable: null
  github: 15

# property: taxonNameString
- localName: taxonNameString
  label: Taxon Name String
  definition: >-
    The complete name string without any authority or year components.
  usage: >-
    `taxonNameString` is a literal. Either `taxonomicNameString` or 
    `dwc:scientificName` is required on a TCS Taxon Name and a Taxon Name can 
    have only one of either.
  notes: >-
    The `taxonNameString` property differs from the `scientificName` property 
    in Darwin Core in that all kinds of names are allowed. Also, in the case of 
    scientific names, contrary to the `dwc:scientificName`, `taxonNameString` 
    does not include the authorship. In botanical names, it does include the 
    rank prefixes for infrageneric and infraspecific epithets as they are 
    considered part of the name.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 16

# property: namePublishedIn
- localName: namePublishedIn
  label: Name Published In
  definition: >-
    Reference to the publication in which the name was first published.
  usage: null
  notes: >-
    In botany, this would be the protologue. This is the IRI counterpart of 
    the Darwin Core `namePublishedIn`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 29

# property: microreference
- localName: microreference
  label: Microreference
  definition: Specifies any minor reference parts, e.g. page number.
  usage: >-
    `microreference` is a string literal; a Taxon Name can have only one 
    `microreference` and only when `namePublishedIn` is used as well.
  notes: >-
    In taxonomic works it is convention to cite the exact location in a work 
    where a new name is published. The `microreference` property lets one do 
    that on the Taxon Name object, so that the `namePublishedIn` reference can 
    be reused.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 30

# property: nomenclaturalCode
- localName: nomenclaturalCode
  label: Nomenclatural Code
  definition: >-
    Nomenclatural code that applies to the group of organisms the taxonomic name 
    is for.
  usage: >-
    `nomenclaturalCode` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalCode`.
  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalCode`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Codes Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_code.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 33

# property: nomenclaturalStatus
- localName: nomenclaturalStatus
  label: Nomenclatural Status
  definition: >-
    Status related to the original publication of the name and its conformance
    to the relevant rules of nomenclature.
  usage: >-
    `nomenclaturalStatus` takes an IRI or object; a Taxon Name can have only one 
    `nomenclaturalStatus`.

  notes: >-
    This is the IRI equivalent of the Darwin Core `nomenclaturalStatus`. In the 
    absence of a TDWG vocabulary, it is recommended to use a value from the GBIF 
    Nomenclatural Status Vocabulary 
    (https://rs.gbif.org/vocabulary/gbif/nomenclatural_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 35

# property: basionym
- localName: basionym
  label: Basionym
  definition: Original name on which the present name is based.
  usage: >-
    A `basionym` is another Taxon Name; a Taxon Name can have only one 
    `basionym`.
  notes: >-
    A basionym is the epithet-bringing name.  The `basionym` property is only 
    used for new combinations ('comb. nov.'). If the new name is a replacement 
    name ('nom. nov.') the `replacedName` property should be used 
    instead.
  examples: 
    - TaxonName-basionym-1
    - TaxonName-basionym-2
  required: No
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  repeatable: No
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  github: 36

# property: replacedName
- localName: replacedName
  label: Replaced name
  definition: >-
    The legitimate or illegitimate, previously published name on which a 
    replacement name (nomen novum) is based.
  usage: >-
    `replacedName` is another Taxon Name; a Taxon Name can have only one 
    `replacedName`.
  notes: >-
    In the Botanical Code the term 'replaced synonym' is used. A 'replacement 
    name' is a name that is published as a substitute for an earlier published 
    name that is either illegitimate or for which a new combination cannot be 
    created in the place a taxon is transferred to because of an older blocking 
    name.
  examples: 
    - TaxonName-replacedName-1
    - TaxonName-replacedName-2
    - TaxonName-replacedName-3
    - TaxonName-replacedName-4
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: No
  github: 37

# property: spellingCorrectionOf
- localName: spellingCorrectionOf
  label: Spelling correction of
  definition: >-
    Name for which this name is a correction
  usage: >-
    `spellingCorrectionOf` is another Taxon Name object
  notes: >-
    The `spellingCorrectionOf` property can be used if the originally published 
    name string, or another established name string, is not spelt correctly 
    according to the current version of the relevant Code. It can link an 
    established spelling of a name to the correctly spelt name where other name 
    relationship properties cannot. `spellingCorrectionOf` is not the same as 
    an orthographic variant. An orthographic variant is a valid name in another 
    publication, while a spelling correction is generally for a correctable 
    error in the original publication. 
  examples:
    - TaxonName-spellingCorrectionOf-1
    - TaxonName-spellingCorrectionOf-2
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  github: 224

# property: conservedAgainst
- localName: conservedAgainst
  label: Conserved Against
  definition: Name(s) against which this name is conserved.
  usage: >-
    The `conservedAgainst` property takes another Taxon Name; a Taxon Name can 
    be conserved against more than one other Taxon Names.
  notes: >-
    A scientific name below the rank of family is not conserved against all 
    other names, but only against one or more names that in turn are rejected 
    against the conserved name. A name can be conserved against more than one 
    other name, so this property is repeatable.
  examples:
    - TaxonName-conservedAgainst
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/TaxonName
  required: No
  repeatable: Yes
  github: 39


# class: NomenclaturalType
- localName: NomenclaturalType
  label: Nomenclatural Type
  definition: Element to which a scientific name is permanently attached.
  usage: >-
    A Nomenclatural Type requires a `typifiedName` and either a `typeName` or 
    `typeSpecimen`.
  notes: >-
    A nomenclatural type fixes the usage of a name to the taxonomic group that 
    contains the type. One or more Nomenclatural Types make up the typification 
    of a Taxon Name. In Darwin Core, NomenclaturalType can be used as object 
    with `dwciri:typeStatus`.
  examples: 
    - NomenclaturalType
  type: http://www.w3.org/2000/01/rdf-schema#Class
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  repeatable: null
  required: null
  github: 58

# property: typifiedName
- localName: typifiedName
  label: Typified Name
  definition: >-
    The scientific name for which the specimen or other name is the type.
  usage: >-
    `typifiedName` is a Taxon Name and is required; a Nomenclatural Type can 
    typify only one Taxon Name.
  notes: >-
    The `typifiedName` property links the Nomenclatural Type back to the Taxon 
    Name. Also, when coming from the Preserved Specimen, the typified name is 
    the most important piece of information, because there is no point in 
    knowing what kind of type a specimen is without knowing for what name it 
    is the type. Therefore, `typifiedName` is a required property.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: Yes
  repeatable: No
  github: 59

# property: typeOfType
- localName: typeOfType
  label: Type of Type
  definition: >-
    The kind of type this specimen is, e.g. holotype, isotype etc.
  usage: >-
    `typeOfType` is an IRI term and should take its value from a controlled 
    vocabulary. A Nomenclatural Type can have only one `typeOfType`
  notes: >-
    This is an IRI property. In the absence of a TDWG controlled vocabulary, 
    it is recommended to use a value from the GBIF Nomenclatural Type Status 
    Vocabulary (https://rs.gbif.org/vocabulary/gbif/type_status.xml).
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  required: No
  repeatable: No
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  github: 60

# property: typeName
- localName: typeName
  label: Type Name
  definition: The name that is the type.
  usage: >-
    `typeName` is a Taxon Name. A nomenclatural type can have only one 
    `typeName`.
  notes: >-
    Taxon names at ranks above species level can be typified by the name of a 
    lower taxon. Ultimately, by following the chain of type names, all names 
    resolve to a type species and thus a type specimen. 
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 61

# property: typeSpecimen
- localName: typeSpecimen
  label: Type Specimen
  definition: The specimen that is the type.
  usage: >-
    `typeSpecimen` takes an IRI – or object – that refers to a specimen. A 
    Nomenclatural Type can only have one `typeSpecimen`.
  notes: >-
    Names at ranks of species and below are typified by a specimen. This
    property is mutually exclusive with `typeName`. This is an IRI property. One
    could use the Darwin Core Preserved Specimen or Material Citation. While a
    Taxon Name can have more than one type specimens, each of these type
    specimens requires its own Nomenclatural Type record, so a Nomenclatural
    Type can have only one `typeSpecimen`.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 62

# property: typePublishedIn
- localName: typePublishedIn
  label: Type Published In
  definition: Publication where the type was nominated
  usage: >-
    `typePublishedIn` is an IRI term. A Nomenclatural Type can have at most one 
    `typePublishedIn`. 
  notes: >-
    `typePublishedIn` is relevant for lectotypes, neotypes, epitypes and 
    conserved types. For other kinds of type the publication where the type is 
    designated is the publication where the name was published.
  type: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property
  organizedInClass: http://rs.tdwg.org/tcs/terms/NomenclaturalType
  required: No
  repeatable: No
  github: 63
